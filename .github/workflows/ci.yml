name: Continuous Integration

on:
  pull_request:
    branches: [ main, preprod, preprod-epi-manager, main-epi-manager, staging ]
  push:
    branches: [ main, preprod, preprod-epi-manager, main-epi-manager, staging ]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  php-tests:
    name: PHP Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        php-version: ['8.1', '8.2']
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_episciences
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Setup PHP ${{ matrix.php-version }}
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-version }}
        extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, dom, filter, gd, json, zip
        coverage: xdebug
        tools: composer:v2
        
    - name: Cache Composer dependencies
      uses: actions/cache@v4
      with:
        path: vendor
        key: ${{ runner.os }}-php${{ matrix.php-version }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php${{ matrix.php-version }}-composer-
          
    - name: Install PHP dependencies
      run: composer install --no-progress --prefer-dist --optimize-autoloader
      
    - name: Wait for MySQL
      run: |
        while ! mysqladmin ping -h"127.0.0.1" -P3306 --silent; do
          sleep 1
        done
        
    - name: Setup test database
      run: |
        mysql -h 127.0.0.1 -P 3306 -u root -proot -e "CREATE DATABASE IF NOT EXISTS test_episciences;"
        mysql -h 127.0.0.1 -P 3306 -u root -proot -e "CREATE DATABASE IF NOT EXISTS test_episciences_auth;"
      
    - name: Run PHP tests
      run: vendor/bin/phpunit --coverage-clover=coverage-php.xml
      env:
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_USER: root
        DB_PASSWORD: root
        DB_NAME: test_episciences
        
    - name: Upload PHP coverage
      uses: codecov/codecov-action@v5
      if: matrix.php-version == '8.2'
      with:
        file: ./coverage-php.xml
        flags: php
        name: php-coverage
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  js-tests:
    name: JavaScript Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'yarn'
        
    - name: Install JavaScript dependencies
      run: yarn install
      
    - name: Run JavaScript tests
      run: yarn test --coverage --watchAll=false --verbose
      
    - name: Upload JavaScript coverage
      uses: codecov/codecov-action@v5
      if: matrix.node-version == '20.x'
      with:
        file: ./coverage/lcov.info
        flags: javascript
        name: javascript-coverage
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  integration:
    name: Integration Status
    runs-on: ubuntu-latest
    needs: [php-tests, js-tests]
    if: always()
    
    steps:
    - name: Check test results
      run: |
        if [[ "${{ needs.php-tests.result }}" == "success" && "${{ needs.js-tests.result }}" == "success" ]]; then
          echo "‚úÖ All tests passed!"
          exit 0
        else
          echo "‚ùå Some tests failed:"
          echo "  PHP tests: ${{ needs.php-tests.result }}"
          echo "  JavaScript tests: ${{ needs.js-tests.result }}"
          exit 1
        fi
        
    - name: Comment on PR
      uses: actions/github-script@v8
      if: github.event_name == 'pull_request'
      with:
        script: |
          const phpResult = '${{ needs.php-tests.result }}';
          const jsResult = '${{ needs.js-tests.result }}';
          
          let message = '## Test Results\n\n';
          message += phpResult === 'success' ? '‚úÖ PHP Tests: Passed\n' : '‚ùå PHP Tests: Failed\n';
          message += jsResult === 'success' ? '‚úÖ JavaScript Tests: Passed\n' : '‚ùå JavaScript Tests: Failed\n';
          
          if (phpResult === 'success' && jsResult === 'success') {
            message += '\nüéâ All tests are passing! Ready to merge.';
          } else {
            message += '\nüîç Please check the failed tests before merging.';
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: message
          });